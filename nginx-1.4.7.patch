diff --git i/src/core/ngx_connection.h w/src/core/ngx_connection.h
index 3daf2ee..fe45ff3 100644
--- i/src/core/ngx_connection.h
+++ w/src/core/ngx_connection.h
@@ -125,6 +125,7 @@ struct ngx_connection_s {
     ngx_listening_t    *listening;
 
     off_t               sent;
+    off_t               received;
 
     ngx_log_t          *log;
 
diff --git i/src/http/ngx_http_request.c w/src/http/ngx_http_request.c
index 1be2d46..6fd7470 100644
--- i/src/http/ngx_http_request.c
+++ w/src/http/ngx_http_request.c
@@ -457,6 +457,7 @@ ngx_http_wait_request_handler(ngx_event_t *rev)
     }
 
     b->last += n;
+    c->received += n;
 
     c->log->action = "reading client request line";
 
@@ -1332,6 +1333,7 @@ ngx_http_read_request_header(ngx_http_request_t *r)
     }
 
     r->header_in->last += n;
+    c->received += n;
 
     return n;
 }
@@ -2815,6 +2817,7 @@ ngx_http_set_keepalive(ngx_http_request_t *r)
         c->data = r;
 
         c->sent = 0;
+        c->received = 0;
         c->destroyed = 0;
 
         if (rev->timer_set) {
@@ -3054,6 +3057,7 @@ ngx_http_keepalive_handler(ngx_event_t *rev)
     }
 
     b->last += n;
+    c->received += n;
 
     c->log->handler = ngx_http_log_error;
     c->log->action = "reading client request line";
@@ -3159,6 +3163,8 @@ ngx_http_lingering_close_handler(ngx_event_t *rev)
             return;
         }
 
+        c->received += n;
+
     } while (rev->ready);
 
     if (ngx_handle_read_event(rev, 0) != NGX_OK) {
diff --git i/src/http/ngx_http_request_body.c w/src/http/ngx_http_request_body.c
index e9cf3e9..7b762e8 100644
--- i/src/http/ngx_http_request_body.c
+++ w/src/http/ngx_http_request_body.c
@@ -328,6 +328,8 @@ ngx_http_do_read_client_request_body(ngx_http_request_t *r)
             rb->buf->last += n;
             r->request_length += n;
 
+            c->received += n;
+
             if (n == rest) {
                 /* pass buffer to request body filter chain */
 
